name: CD dotnet

on:
  push:
    paths:
      - ".github/workflows/cd-dotnet.yml"
      - "api/**"
  workflow_dispatch: # manual

permissions:
  security-events: write

jobs:
  # add back in to final example, if I go the route of a full CD pipeline
  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: 8.0.x
  #     - run: dotnet restore
  #     - run: dotnet build
  #     - run: dotnet test
  scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - run: env
      - name: Initialize CodeQL
        uses:
          github/codeql-action/init@v3
          # note there are multiple, nested actions (not top level as is often the case with other actions)
          # FYI action not published to marketplace: https://github.com/github/codeql-action
        with:
          # inputs => https://github.com/github/codeql-action/blob/main/init/action.yml
          # FYI can also pass codeql config/args via .github/codeql/codeql-config.yml (see example in https://github.com/github/codeql-action/blob/63d519c0ae6a4b739e3377a517400c352a7d829b/.github/codeql/codeql-config.yml)
          languages: csharp
          source-root: ./api
          queries: ./codeql-custom-queries-csharp/example.ql # I would like to limit it to a single query for time sake, use + to add vs override (uses in codeql-config.yml)
          # debug: true # verbose output
          # build-mode: # PRN
          # FYI look in logs to find what version and location of codeql used (also helpful to verify commands used)
          #      /opt/hostedtoolcache/CodeQL/2.17.2/x64/codeql/codeql database init --overwrite --db-cluster /home/runner/work/_temp/codeql_databases --source-root=/home/runner/work/tmp-prep-course-gh-actions/tmp-prep-course-gh-actions/api --extractor-include-aliases --language=csharp --begin-tracing --trace-process-name=Runner.Worker.exe --codescanning-config=/home/runner/work/_temp/user-config.yaml --calculate-language-specific-baseline --sublanguage-file-coverage
          # *** logs => This in-progress database is ready to be populated by an extractor.
      # TODO reuse codeql args b/w steps (use codeql-config.yml?)
      #   TODO FYI codeql sets a ton of env vars, IIAC I can use that to pass config to subsequent codeql-action/*** steps?
      # ! just use codeql command manually? I know the subcommands I need... why use actions that add another layer of copmlexity (seriously that is a tradeoff one must consider)
      - run: tree /home/runner/work/_temp/codeql_databases
      - run: env
      - name: Autobuild
        run: dotnet build
        working-directory: ./api
        # TODO hide compiler warnings so as not to confuse with codeql alerts (from my custom query about unused local vars)
      - name: run my query manually
        run: /opt/hostedtoolcache/CodeQL/2.17.2/x64/codeql/codeql query run --database /home/runner/work/_temp/codeql_databases/csharp ./codeql-custom-queries-csharp/example.ql
        # --output=csv
      # - run: /opt/hostedtoolcache/CodeQL/2.17.2/x64/codeql/codeql --version      # FYI codeql is NOT put into the path

      # TODO? codeql packs => https://docs.github.com/en/code-security/codeql-cli/getting-started-with-the-codeql-cli/customizing-analysis-with-codeql-packs
#
#
# notes
#    Warning: This run of the CodeQL Action does not have permission to access Code Scanning API endpoints. As a result, it will not be opted into any experimental features. This could be because the Action is running on a pull request from a fork. If not, please ensure the Action has the 'security-events: write' permission. Details: Resource not accessible by integration

name: inspect runner image

on:
  push:
    paths:
      - ".github/workflows/inspect-runner-image.yml"
      - "upper/**"
  workflow_dispatch: # manual

# FYI go guide: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

jobs:
  # build:
  #   strategy:
  #     matrix:
  #       os: [ubuntu-24.04, ubuntu-22.04] #, ubuntu-20.04] # , ubuntu-latest] confirmed ubuntu-latest points to 22.04
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - run: env
  #     # instead of trusting the runner image readmes, you can validate what is available in a given runner
  #     - name: show path dir contents w/ ls
  #       run: |
  #         IFS=':' read -r -a dirs <<< "$PATH"

  #         for dir in "${dirs[@]}"; do
  #           echo && echo "Listing contents of: $dir"
  #           ls -al "$dir" || true
  #         done
  #     - name: hosted tool cache
  #       run: |
  #         sudo apt install -y tree
  #         echo && echo tree -L 3 /opt/hostedtoolcache
  #         tree -L 2 /opt/hostedtoolcache || true
  #     - run: cat /etc/os-release
  #     - run: which -a go
  #     - run: go version
  #     - run: go env
  # build:
  #   strategy:
  #     matrix:
  #       os: [ubuntu-24.04, ubuntu-22.04] #, ubuntu-20.04] # , ubuntu-latest] confirmed ubuntu-latest points to 22.04
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     # instead of trusting the runner image readmes, you can validate what is available in a given runner
  #     - run: which -a go
  #     - run: go version # before setup-go
  #     # setup-go:
  #     - uses: actions/setup-go@v5
  #       with:
  #         #go-version: '1.22' # ubuntu 24.04 already has 1.22.3, but 22.04 will switch from 1.21.10=>1.22.3 (from its tool cache) => both find the version in their cache
  #         go-version: '1.22.2' # not in tool cache, must be downloaded
  #     - name: show path dir contents w/ ls
  #       run: |
  #         IFS=':' read -r -a dirs <<< "$PATH"

  #         for dir in "${dirs[@]}"; do
  #           echo && echo "Listing contents of: $dir"
  #           ls -al "$dir" || true
  #         done
  #     # inspect env after go setup
  #     - run: which -a go
  #     - run: go version
  #     - run: go env
  #     - run: pwd && ls -al # for next demo on actions/checkout
  #     - uses: actions/checkout@v4
  #     - run: pwd && ls -al # after checkout

  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: which -a go
  #     - run: go version # before setup-go
  #     - uses: actions/setup-go@v5
  #       with:
  #         #go-version: '1.22' # ubuntu 24.04 already has 1.22.3, but 22.04 will switch from 1.21.10=>1.22.3 (from its tool cache) => both find the version in their cache
  #         go-version: "1.22.2" # not in tool cache, must be downloaded
  #         #! move after checkout so we can use go-version-file: 'upper/go.mod'
  #     - run: which -a go
  #     - run: go version

  #     - run: pwd && ls -al # for next demo on actions/checkout
  #     - uses: actions/checkout@v4
  #     - run: pwd && ls -al # after checkout
  #     - run: go mod download
  #       working-directory: upper
  #     - run: |
  #         ls -al # before build
  #         go build
  #         go test
  #         ls -al # after build => upper! (executable)
  #         echo
  #         ./upper foo the bar
  #       working-directory: upper

  # rearrange to checkout before setup-go so we can use go-version-file: 'upper/go.mod'
  build:
    runs-on: ubuntu-latest
    steps:
      - run: go version # before setup-go
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          #go-version: '1.22' # ubuntu 24.04 already has 1.22.3, but 22.04 will switch from 1.21.10=>1.22.3 (from its tool cache) => both find the version in their cache
          go-version: "1.22.2" # not in tool cache, must be downloaded
          #! move after checkout so we can use go-version-file: 'upper/go.mod'
      - run: go version

      - run: go mod download
        working-directory: upper
      - run: |
          ls -al # before build
          go build
          go test
          ls -al # after build => upper! (executable)
          echo
          ./upper foo the bar
        working-directory: upper
